@{
    // odd formatting in this file is to cause more attractive results in the output.
    var items = (IEnumerable<dynamic>)Enumerable.Cast<dynamic>(Model);
    var linkClass = String.Empty;
}
@{
if (!HasText(Model.Text)) {
    @DisplayChildren(Model)
} else {
    string requestUrl = Request.Path.Replace(Request.ApplicationPath, string.Empty).TrimEnd('/').ToUpperInvariant();
    string modelUrl = Model.Href.Replace(Request.ApplicationPath, string.Empty).TrimEnd('/').ToUpperInvariant();
    if (requestUrl == modelUrl) { 
	    Model.Classes.Add("current");
        linkClass = "current";
    }
    if(items.Any()) {
        Model.Classes.Add("dropdown");
    }
    var tag = Tag(Model, "li");
    @tag.StartElement
            
    @* morphing the shape to keep Model untouched
    Model.Metadata.Alternates.Clear(); 
    Model.Metadata.Type = "MenuItemLink";*@

    <a href="@Model.Href" class="@linkClass">@Model.Text</a>
    
    if (items.Any()) {
        <ul>
        @DisplayChildren(Model)
        </ul>
    }
    @tag.EndElement
    }
}